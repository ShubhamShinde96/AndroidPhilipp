plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.shubham.tmdbclient"
        minSdk 22
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_KEY", "\"ae34a614d216948277efbebf4d21caaa\""
        buildConfigField "String", "BASE_URL", "\"https://api.themoviedb.org/3/\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def lifecycle_version = "2.4.0"
    def roomVersion = "2.4.0"
    def coroutineVersion = "1.6.0"
    def daggerVersion = "2.40.5"
    def retrofitVersion = "2.9.0"

    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")

    implementation("androidx.room:room-runtime:$roomVersion")
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$roomVersion")
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$roomVersion")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion")
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"

    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    implementation("com.squareup.okhttp3:logging-interceptor:4.9.3")

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'



//    testImplementation 'junit:junit:4.13.2' need to use androidTestImplementation


//    testImplementation "com.google.truth:truth:1.1.3" need to use androidTestImplementation
//    Also to make our test assertions and failure messages more readable we have used this truth library

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    testImplementation 'org.mockito:mockito-core:2.19.0'


//    lesson 127: To test room we'll need to use android framework, so we will write them as instrumented test.
//    therefore we added some android test dependencies. Room is one of android jetpack architecture component
//    library so in order to test room we need this "androidx.arch.core:core-testing" library, we've added that below.
//    testImplementation "androidx.arch.core:core-testing:2.1.0" need to use androidTestImplementation
//    for view model and live data we have added this arch additional dependency

//    since we're going to do instrumented unit testing, we need to use androidTestImplementation

//    And since we have used kotlin coroutines for room, we need to add below dependency
//    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0' need to use androidTestImplementation


    androidTestImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
    androidTestImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


//    lesson 128: Testing MovieViewModel & LiveData -> Since there is no requirement to test this viewmodel
//    class, We will write them as local unit tests.
//    so now we need to add testImplementation dependencies

    testImplementation "junit:junit:4.13.2"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation 'androidx.test.ext:junit:1.1.3'

    // We also need to add this Roboelectric dependency: This will provide a simulated android environment for
    // AndroidX testing.

    testImplementation "org.robolectric:robolectric:4.7.3"

}